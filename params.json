{
  "name": "Sensey",
  "tagline": "Android library to make detecting gestures easy",
  "body": "### Specs\r\n[ ![Download](https://api.bintray.com/packages/nisrulz/maven/com.github.nisrulz%3Asensey/images/download.svg) ](https://bintray.com/nisrulz/maven/com.github.nisrulz%3Asensey/_latestVersion) [![API](https://img.shields.io/badge/API-9%2B-orange.svg?style=flat)](https://android-arsenal.com/api?level=9) <a href=\"http://www.methodscount.com/?lib=com.github.nisrulz%3Asensey%3A1.4.1\"><img src=\"https://img.shields.io/badge/Size-15 KB-e91e63.svg\"/></a>\r\n\r\n\r\n### Featured in\r\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Sensey-green.svg?style=true)](https://android-arsenal.com/details/1/3550) [![Android Weekly](https://img.shields.io/badge/Android%20Weekly-%23209-blue.svg)](http://androidweekly.net/issues/issue-209) [![AndroidSweets](https://img.shields.io/badge/AndroidSweets-%2320-ff69b4.svg)](https://androidsweets.ongoodbits.com/2016/05/26/issue-20) [![AndroidDev Digest](https://img.shields.io/badge/AndroidDev%20Digest-%23100-blue.svg)](https://www.androiddevdigest.com/digest-100/)\r\n\r\n### Show some :heart:\r\n[![GitHub stars](https://img.shields.io/github/stars/nisrulz/sensey.svg?style=social&label=Star)](https://github.com/nisrulz/sensey) [![GitHub forks](https://img.shields.io/github/forks/nisrulz/sensey.svg?style=social&label=Fork)](https://github.com/nisrulz/sensey/fork) [![GitHub watchers](https://img.shields.io/github/watchers/nisrulz/sensey.svg?style=social&label=Watch)](https://github.com/nisrulz/sensey) [![GitHub followers](https://img.shields.io/github/followers/nisrulz.svg?style=social&label=Follow)](https://github.com/nisrulz/sensey)  \r\n[![Twitter Follow](https://img.shields.io/twitter/follow/nisrulz.svg?style=social)](https://twitter.com/nisrulz) \r\n\r\nAndroid library which makes detecting gestures a breeze.\r\n\r\nThe library is built for simplicity and ease of use. It eliminates most boilerplate code for dealing with setting up gesture detection on Android.\r\n\r\nGo build awesome stuff with it!  :smile:\r\n\r\n# Changelog\r\n\r\nStarting with `1.0.1`, Changes exist in the [releases tab](https://github.com/nisrulz/sensey/releases).\r\n\r\n# Supported gestures\r\n\r\n 1. [Flip](https://github.com/nisrulz/sensey/wiki/Usage#flip)\r\n    + onFaceUp\r\n    + onFaceDown\r\n 1. [Light](https://github.com/nisrulz/sensey/wiki/Usage#light)\r\n    + onDark\r\n    + onLight\r\n 1. [Orientation](https://github.com/nisrulz/sensey/wiki/Usage#orientation)\r\n    + onTopSideUp\r\n    + onBottomSideUp\r\n    + onLeftSideUp\r\n    + onRightSideUp\r\n 1. [PinchScale](https://github.com/nisrulz/sensey/wiki/Usage#pinchscale)\r\n    + OnScale\r\n    + OnScaleStart\r\n    + OnScaleEnd\r\n 1. [Proximity](https://github.com/nisrulz/sensey/wiki/Usage#proximity)\r\n    + onNear\r\n    + onFar\r\n 1. [Shake](https://github.com/nisrulz/sensey/wiki/Usage#shake)\r\n 1. [TouchType](https://github.com/nisrulz/sensey/wiki/Usage#touchtype)\r\n    + onDoubleTap\r\n    + onScroll(direction)\r\n    + onSingleTap\r\n    + onSwipeLeft\r\n    + onSwipeRight\r\n    + onLongPress\r\n    + onTwoFingerSingleTap\r\n    + onThreeFingerSingleTap\r\n\r\n\r\n# Including in your project\r\nSensey is available in the Jcenter, so getting it as simple as adding it as a dependency\r\n```gradle\r\ncompile 'com.github.nisrulz:sensey:{latest version}'\r\n```\r\nwhere `{latest version}` corresponds to published version in [ ![Download](https://api.bintray.com/packages/nisrulz/maven/com.github.nisrulz%3Asensey/images/download.svg) ](https://bintray.com/nisrulz/maven/com.github.nisrulz%3Asensey/_latestVersion)\r\n\r\n#Usage\r\n## Initialize Sensey under your onCreate() in the activity/service\r\n```java\r\nSensey.getInstance().init(context);\r\n```\r\n\r\n## Next to enable detection for\r\n\r\n### Shake\r\n+ Create an instance of ShakeListener\r\n```java\r\nShakeDetector.ShakeListener shakeListener=new ShakeDetector.ShakeListener() {\r\n    @Override public void onShakeDetected() {\r\n       // Shake detected, do something\r\n   }\r\n};\r\n```\r\n+ Now to start listening for Shake gesture, pass the instance `shakeListener` to `startShakeDetection()` function\r\n```java\r\nSensey.getInstance().startShakeDetection(shakeListener);\r\n```\r\nIf you want to modify the `threshold` , pass an `int` as value\r\n```java\r\nSensey.getInstance().startShakeDetection(threshold,shakeListener);\r\n```\r\n+ To stop listening for Shake gesture, pass the instance `shakeListener` to `stopShakeDetection()` function\r\n```java\r\nSensey.getInstance().stopShakeDetection(shakeListener);\r\n```\r\n\r\n### Flip\r\n+ Create an instance of FlipListener\r\n```java\r\nFlipDetector.FlipListener flipListener=new FlipDetector.FlipListener() {\r\n    @Override public void onFaceUp() {\r\n       // Device Facing up\r\n    }\r\n\r\n    @Override public void onFaceDown() {\r\n      // Device Facing down\r\n    }\r\n};\r\n```\r\n+ Now to start listening for Flip gesture, pass the instance `flipListener` to `startFlipDetection()` function\r\n```java\r\nSensey.getInstance().startFlipDetection(flipListener);\r\n```\r\n\r\n+ To stop listening for Flip gesture, pass the instance `flipListener` to `stopFlipDetection()` function\r\n```java\r\nSensey.getInstance().stopFlipDetection(flipListener);\r\n```\r\n\r\n### Orientation\r\n+ Create an instance of OrientationListener\r\n```java\r\nOrientationDetector.OrientationListener orientationListener=new OrientationDetector.OrientationListener() {\r\n  @Override public void onTopSideUp() {\r\n     // Top side of device is up\r\n  }\r\n\r\n  @Override public void onBottomSideUp() {\r\n     // Bottom side of device is up\r\n  }\r\n\r\n  @Override public void onRightSideUp() {\r\n     // Right side of device is up\r\n  }\r\n\r\n  @Override public void onLeftSideUp() {\r\n     // Left side of device is up       \r\n  }\r\n};\r\n```\r\n+ Now to start listening for Orientation gesture, pass the instance `orientationListener` to `startOrientationDetection()` function\r\n```java\r\nSensey.getInstance().startOrientationDetection(orientationListener);\r\n```\r\n\r\n+ To stop listening for Orientation gesture, pass the instance `orientationListener` to `stopOrientationDetection()` function\r\n```java\r\nSensey.getInstance().stopOrientationDetection(orientationListener);\r\n```\r\n\r\n### Proximity\r\n+ Create an instance of ProximityListener\r\n```java\r\nProximityDetector.ProximityListener proximityListener=new ProximityDetector.ProximityListener() {\r\n   @Override public void onNear() {\r\n        // Near to device\r\n   }\r\n\r\n   @Override public void onFar() {\r\n        // Far from device\r\n   }\r\n};\r\n```\r\n+ Now to start listening for Orientation gesture, pass the instance `proximityListener` to `startProximityDetection()` function\r\n```java\r\nSensey.getInstance().startProximityDetection(proximityListener);\r\n```\r\n\r\n+ To stop listening for Orientation gesture, pass the instance `proximityListener` to `stopProximityDetection()` function\r\n```java\r\nSensey.getInstance().stopProximityDetection(proximityListener);\r\n```\r\n\r\n### Light\r\n+ Create an instance of LightListener\r\n```java\r\nLightDetector.LightListener lightListener=new LightDetector.LightListener() {\r\n   @Override public void onDark() {\r\n      // Dark\r\n   }\r\n\r\n   @Override public void onLight() {\r\n      // Not Dark\r\n   }\r\n};\r\n```\r\n+ Now to start listening for Orientation gesture, pass the instance `lightListener` to `startLightDetection()` function\r\n```java\r\nSensey.getInstance().startLightDetection(lightListener);\r\n```\r\n\r\n+ To stop listening for Orientation gesture, pass the instance `lightListener` to `stopLightDetection()` function\r\n```java\r\nSensey.getInstance().stopLightDetection(lightListener);\r\n```\r\n\r\n\r\n### For Touch based gestures\r\n\r\n***IMPORTANT*** : Implement this to intercept touch actions in activity by overriding the `dispatchTouchEvent`.\r\n```java\r\n @Override public boolean dispatchTouchEvent(MotionEvent event) {\r\n    // Setup onTouchEvent for detecting type of touch gesture\r\n    Sensey.getInstance().setupDispatchTouchEvent(event);\r\n    return super.dispatchTouchEvent(event);\r\n }\r\n```\r\n\r\n### PinchScale\r\n+ Create an instance of PinchScaleListener\r\n```java\r\nPinchScaleDetector.PinchScaleListener pinchScaleListener=new PinchScaleDetector.PinchScaleListener() {\r\n   @Override public void onScale(ScaleGestureDetector scaleGestureDetector, boolean isScalingOut) {\r\n        if (isScalingOut) {\r\n           // Scaling Out;\r\n        } else {\r\n          // Scaling In\r\n        }\r\n   }\r\n\r\n   @Override public void onScaleStart(ScaleGestureDetector scaleGestureDetector) {\r\n          // Scaling Started\r\n   }\r\n\r\n   @Override public void onScaleEnd(ScaleGestureDetector scaleGestureDetector) {\r\n          // Scaling Stopped\r\n   }\r\n};\r\n```\r\n+ Now to start listening for PinchScale gesture, pass the instance `pinchScaleListener` to `startPinchScaleDetection()` function\r\n```java\r\nSensey.getInstance().startPinchScaleDetection(pinchScaleListener);\r\n```\r\n\r\n+ To stop listening for PinchScale gesture, simply call  `stopPinchScaleDetection()` function\r\n```java\r\nSensey.getInstance().stopPinchScaleDetection();\r\n```\r\n\r\n> Don't forget to implement `dispatchTouchEvent()` as explained [here](https://github.com/nisrulz/sensey/wiki/Usage#for-touch-based-gestures)\r\n\r\n\r\n### TouchType\r\n+ Create an instance of TouchTypListener\r\n```java\r\nTouchTypeDetector.TouchTypListener touchTypListener=new TouchTypeDetector.TouchTypListener() {\r\n   @Override public void onTwoFingerSingleTap() {\r\n         // Two finger single tap\r\n   }\r\n\r\n   @Override public void onThreeFingerSingleTap() {\r\n         // Three finger single tap\r\n   }\r\n\r\n   @Override public void onDoubleTap() {\r\n         // Double tap\r\n   }\r\n\r\n   @Override public void onScroll(int scrollDirection) {\r\n     switch (scrollDirection) {\r\n      case TouchTypeDetector.SCROLL_DIR_UP:\r\n        // Scrolling Up\r\n        break;\r\n      case TouchTypeDetector.SCROLL_DIR_DOWN:\r\n        // Scrolling Down\r\n        break;\r\n      case TouchTypeDetector.SCROLL_DIR_LEFT:\r\n        // Scrolling Left\r\n        break;\r\n      case TouchTypeDetector.SCROLL_DIR_RIGHT:\r\n        // Scrolling Right\r\n        break;\r\n      default:\r\n        // Do nothing\r\n        break;\r\n    }\r\n   }\r\n\r\n   @Override public void onSingleTap() {\r\n         // Single tap\r\n   }\r\n\r\n   @Override public void onSwipe(int swipeDirection) {\r\n     switch (swipeDirection) {\r\n      case TouchTypeDetector.SWIPE_DIR_UP:\r\n        // Swipe Up\r\n        break;\r\n      case TouchTypeDetector.SWIPE_DIR_DOWN:\r\n        // Swipe Down\r\n        break;\r\n      case TouchTypeDetector.SWIPE_DIR_LEFT:\r\n        // Swipe Left\r\n        break;\r\n      case TouchTypeDetector.SWIPE_DIR_RIGHT:\r\n        // Swipe Right\r\n        break;\r\n      default:\r\n        //do nothing\r\n        break;\r\n    }\r\n   }\r\n\r\n   @Override public void onLongPress() {\r\n         // Long press\r\n   }\r\n};\r\n```\r\n+ Now to start listening for TouchType gesture, pass the instance `touchTypListener` to `startTouchTypeDetection()` function\r\n```java\r\nSensey.getInstance().startTouchTypeDetection(touchTypListener);\r\n```\r\n\r\n+ To stop listening for TouchType gesture, simply call  `stopTouchTypeDetection()` function\r\n```java\r\nSensey.getInstance().stopTouchTypeDetection();\r\n```\r\n\r\n> Don't forget to implement `dispatchTouchEvent()` as explained [here](https://github.com/nisrulz/sensey/wiki/Usage#for-touch-based-gestures)\r\n\r\n# Pull Requests\r\nI welcome and encourage all pull requests. It usually will take me within 24-48 hours to respond to any issue or request. Here are some basic rules to follow to ensure timely addition of your request:\r\n  1. Match coding style (braces, spacing, etc.) This is best achieved using CMD+Option+L (Reformat code) on Mac (not sure for Windows) with Android Studio defaults.\r\n  2. If its a feature, bugfix, or anything please only change code to what you specify.\r\n  3. Please keep PR titles easy to read and descriptive of changes, this will make them easier to merge :)\r\n  4. Pull requests _must_ be made against `develop` branch. Any other branch (unless specified by the maintainers) will get rejected.\r\n  5. Check for existing [issues](https://github.com/nisrulz/sensey/issues) first, before filing an issue.  \r\n  6. Have fun!\r\n\r\n### Created & Maintained By\r\n[Nishant Srivastava](https://github.com/nisrulz) ([@nisrulz](https://www.twitter.com/nisrulz))\r\n\r\nLicense\r\n=======\r\n\r\n    Copyright 2016 Nishant Srivastava\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}